{"repo_url": "https://github.com/vinta/Haul", "commit_hash": "234024ab8452ea2f41b18561377295cf2879fb20", "samples": [{"description": "        Use requests to fetch remote content\n", "documentation": {"requests.get": "Sends a GET request.\n\n    :param url: URL for the new :class:`Request` object.\n    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n    ", "mimetypes.guess_type": "Guess the type of a file based on its URL.\n\n    Return value is a tuple (type, encoding) where type is None if the\n    type can't be guessed (no or unknown suffix) or a string of the\n    form type/subtype, usable for a MIME Content-type header; and\n    encoding is None for no encoding or the name of the program used\n    to encode (e.g. compress or gzip).  The mappings are table\n    driven.  Encoding suffixes are case sensitive; type suffixes are\n    first tried case sensitive, then case insensitive.\n\n    The suffixes .tgz, .taz and .tz (case sensitive!) are all mapped\n    to \".tar.gz\".  (This is table-driven too, using the dictionary\n    suffix_map).\n\n    Optional `strict' argument when false adds a bunch of commonly found, but\n    non-standard types.\n    "}, "filename": "haul/core.py", "related_lines": {"8,44": [1]}, "snippet_lines": ["        try:\n", "            r = requests.get(url)\n", "        except requests.ConnectionError:\n", "            raise exceptions.RetrieveError('Connection fail')\n", "\n", "        if r.status_code >= 400:\n", "            raise exceptions.RetrieveError('Connected, but status code is %s' % (r.status_code))\n", "\n", "        real_url = r.url\n", "        content = r.content\n", "\n", "        try:\n", "            content_type = r.headers['Content-Type']\n", "        except KeyError:\n", "            content_type, encoding = mimetypes.guess_type(real_url, strict=False)\n", "\n", "        self.response = r\n", "\n", "        return content_type.lower(), content\n"], "start_line": 50}, {"description": "    Find image URL in <img>'s src attribute\n", "documentation": {"soup.find_all": "traverses the tree, starting at the given point, and finds all the Tag and NavigableString objects that match the criteria you give"}, "filename": "haul/finders/pipeline/html.py", "related_lines": {"4,43": [3]}, "snippet_lines": ["    now_finder_image_urls = []\n", "\n", "    for img in soup.find_all('img'):\n", "        src = img.get('src', None)\n", "        if src:\n", "            src = str(src)\n", "            if (src not in finder_image_urls) and \\\n", "               (src not in now_finder_image_urls):\n", "                now_finder_image_urls.append(src)\n", "\n", "    output = {}\n", "    output['finder_image_urls'] = finder_image_urls + now_finder_image_urls\n", "\n", "    return output\n"], "start_line": 14}]}