{"repo_url": "https://github.com/msiemens/tinydb", "commit_hash": "bc2b630dd1dd996a4aa0de07decb4c7ea0190b0e", "samples": [{"description": "        Get access to a specific table.\n\n        Creates a new table, if it hasn't been created before, otherwise it\n        returns the cached :class:`~tinydb.Table` object.\n\n        :param name: The name of the table.\n        :type name: str\n        :param cache_size: How many query results to cache.\n", "documentation": {"_read": "Reading access to the DB."}, "filename": "tinydb/database.py", "related_lines": {"104,173": [0, 1], "49,102": [3]}, "snippet_lines": ["        if name in self._table_cache:\n", "            return self._table_cache[name]\n", "\n", "        table = self.table_class(StorageProxy(self._storage, name), **options)\n", "\n", "        self._table_cache[name] = table\n", "        \n", "        # table._read will create an empty table in the storage, if necessary\n", "        table._read()\n", "\n", "        return table\n"], "start_line": 107}, {"description": "        Clear the query cache.\n\n        A simple helper that clears the internal query cache.\n", "documentation": {}, "filename": "tinydb/database.py", "related_lines": {"8,29": [0]}, "snippet_lines": ["        self._query_cache.clear()\n"], "start_line": 257}, {"description": "        Push a key to the tail of the LRU queue\n", "documentation": {}, "filename": "tinydb/utils.py", "related_lines": {"8,47": [2]}, "snippet_lines": ["        if key in self.lru:\n", "            self.lru.remove(key)\n", "        self.lru.append(key)\n"], "start_line": 33}]}